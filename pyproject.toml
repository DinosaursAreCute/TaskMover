[tool.poetry]
name = "taskmover"
version = "1.0.0"
description = "Intelligent file organization system with pattern-based rules, conflict resolution, and AI-assisted development"
authors = ["TaskMover Team"]
readme = "README.md"
packages = [{include = "taskmover"}]

[tool.poetry.dependencies]
python = "^3.11"
pyyaml = "^6.0.1"
colorama = "^0.4.6"
ttkbootstrap = "^1.10.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-mock = "^3.12.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
pytest-benchmark = "^4.0.0"
black = "^23.11.0"
mypy = "^1.7.1"
ruff = "^0.1.7"
pre-commit = "^3.5.0"
coverage = "^7.3.2"
types-pyyaml = "^6.0.12.20250516"
types-colorama = "^0.4.15.20240311"

[tool.poetry.scripts]
taskmover = "taskmover.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
explicit_package_bases = true
files = [
    "taskmover/",
    "tests/",
]
exclude = [
    ".github/scripts/",
]

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".cleanup_backup",
]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err`
    "UP007", # Use `X | Y` for type annotations
    "UP006", # Use `dict` instead of `Dict` for type annotation
    "UP035", # Import from `collections.abc` instead
    "F401",  # imported but unused (in some test files)
    "F821",  # undefined name (some edge cases)
    "I001",  # Import block is un-sorted (let black handle this)
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=taskmover --cov-branch --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
    "manual: marks tests that require manual verification",
]

[tool.coverage.run]
source = ["taskmover"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
